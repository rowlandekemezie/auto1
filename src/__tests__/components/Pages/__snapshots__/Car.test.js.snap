// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Cars /> should render component properly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Cars
    colors={
      Object {
        "colors": Array [
          "Red",
          "Yellow",
        ],
      }
    }
    fetchAllCars={[MockFunction]}
    fetchAllColors={[MockFunction]}
    fetchAllManufacturers={[MockFunction]}
    history={
      Object {
        "push": [MockFunction],
      }
    }
    manufacturers={
      Object {
        "manufacturers": Array [
          "BMW",
        ],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <NavBar />,
        <ForwardRef>
          <SidebarFilter
            colors={
              Object {
                "colors": Array [
                  "Red",
                  "Yellow",
                ],
              }
            }
            fetchAllCars={[MockFunction]}
            fetchAllColors={[MockFunction]}
            fetchAllManufacturers={[MockFunction]}
            history={
              Object {
                "push": [MockFunction],
              }
            }
            manufacturers={
              Object {
                "manufacturers": Array [
                  "BMW",
                ],
              }
            }
          />
          <ProductOverview
            currentPage={1}
            handleOnChange={[Function]}
            onNext={[Function]}
            onPrevious={[Function]}
            previousPage={1}
            value={
              Object {
                "label": "None",
                "value": "",
              }
            }
          />
        </ForwardRef>,
        <Footer />,
      ],
      "color": "#CDCDCD",
      "delay": 0,
      "ready": false,
      "rows": 7,
      "type": "media",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <SidebarFilter
              colors={
                Object {
                  "colors": Array [
                    "Red",
                    "Yellow",
                  ],
                }
              }
              fetchAllCars={[MockFunction]}
              fetchAllColors={[MockFunction]}
              fetchAllManufacturers={[MockFunction]}
              history={
                Object {
                  "push": [MockFunction],
                }
              }
              manufacturers={
                Object {
                  "manufacturers": Array [
                    "BMW",
                  ],
                }
              }
            />,
            <ProductOverview
              currentPage={1}
              handleOnChange={[Function]}
              onNext={[Function]}
              onPrevious={[Function]}
              previousPage={1}
              value={
                Object {
                  "label": "None",
                  "value": "",
                }
              }
            />,
            undefined,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "colors": Object {
                "colors": Array [
                  "Red",
                  "Yellow",
                ],
              },
              "fetchAllCars": [MockFunction],
              "fetchAllColors": [MockFunction],
              "fetchAllManufacturers": [MockFunction],
              "history": Object {
                "push": [MockFunction],
              },
              "manufacturers": Object {
                "manufacturers": Array [
                  "BMW",
                ],
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "cars": undefined,
              "currentPage": 1,
              "handleOnChange": [Function],
              "onNext": [Function],
              "onPrevious": [Function],
              "previousPage": 1,
              "totalPageCount": undefined,
              "value": Object {
                "label": "None",
                "value": "",
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          undefined,
        ],
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-ckVGcZ",
            "isStatic": true,
            "rules": Array [
              "
  flex: 1;
  display: flex;
  flex-direction: column;
  padding: 12px;
  justify-content: space-between;
  min-height: calc(100vh - 184px);

  @media (min-width: 768px) {
    flex-direction: row;
    padding: 24px;
  }
",
            ],
          },
          "displayName": "styled.main",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-ckVGcZ",
          "target": "main",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <NavBar />,
          <ForwardRef>
            <SidebarFilter
              colors={
                Object {
                  "colors": Array [
                    "Red",
                    "Yellow",
                  ],
                }
              }
              fetchAllCars={[MockFunction]}
              fetchAllColors={[MockFunction]}
              fetchAllManufacturers={[MockFunction]}
              history={
                Object {
                  "push": [MockFunction],
                }
              }
              manufacturers={
                Object {
                  "manufacturers": Array [
                    "BMW",
                  ],
                }
              }
            />
            <ProductOverview
              currentPage={1}
              handleOnChange={[Function]}
              onNext={[Function]}
              onPrevious={[Function]}
              previousPage={1}
              value={
                Object {
                  "label": "None",
                  "value": "",
                }
              }
            />
          </ForwardRef>,
          <Footer />,
        ],
        "color": "#CDCDCD",
        "delay": 0,
        "ready": false,
        "rows": 7,
        "type": "media",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <SidebarFilter
                colors={
                  Object {
                    "colors": Array [
                      "Red",
                      "Yellow",
                    ],
                  }
                }
                fetchAllCars={[MockFunction]}
                fetchAllColors={[MockFunction]}
                fetchAllManufacturers={[MockFunction]}
                history={
                  Object {
                    "push": [MockFunction],
                  }
                }
                manufacturers={
                  Object {
                    "manufacturers": Array [
                      "BMW",
                    ],
                  }
                }
              />,
              <ProductOverview
                currentPage={1}
                handleOnChange={[Function]}
                onNext={[Function]}
                onPrevious={[Function]}
                previousPage={1}
                value={
                  Object {
                    "label": "None",
                    "value": "",
                  }
                }
              />,
              undefined,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "colors": Object {
                  "colors": Array [
                    "Red",
                    "Yellow",
                  ],
                },
                "fetchAllCars": [MockFunction],
                "fetchAllColors": [MockFunction],
                "fetchAllManufacturers": [MockFunction],
                "history": Object {
                  "push": [MockFunction],
                },
                "manufacturers": Object {
                  "manufacturers": Array [
                    "BMW",
                  ],
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "cars": undefined,
                "currentPage": 1,
                "handleOnChange": [Function],
                "onNext": [Function],
                "onPrevious": [Function],
                "previousPage": 1,
                "totalPageCount": undefined,
                "value": Object {
                  "label": "None",
                  "value": "",
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            undefined,
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-ckVGcZ",
              "isStatic": true,
              "rules": Array [
                "
  flex: 1;
  display: flex;
  flex-direction: column;
  padding: 12px;
  justify-content: space-between;
  min-height: calc(100vh - 184px);

  @media (min-width: 768px) {
    flex-direction: row;
    padding: 24px;
  }
",
              ],
            },
            "displayName": "styled.main",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-ckVGcZ",
            "target": "main",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
